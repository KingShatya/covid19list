{"version":3,"sources":["components/CovidCard/index.jsx","components/Header/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","backgroundColor","color","margin","caseNumber","fontWeight","CaseView","number","label","classes","style","marginTop","display","flexDirection","alignItems","justifyContent","Typography","variant","component","className","CovidCard","newConfirmed","totalConfirmed","totalDeaths","countryID","countryName","Card","CardActionArea","CardContent","src","marginRight","alt","Header","NationLists","lists","map","list","index","key","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","CovidApp","React","useState","setLists","countries","setCountries","currentShown","setCurrentShown","isLoading","setIsLoading","addCountries","i","length","newItem","NewConfirmed","TotalConfirmed","TotalDeaths","CountryCode","Country","prevArray","useEffect","fetch","then","result","json","Countries","finally","Button","onClick","marginBottom","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdf73f87.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: '80vw',\n    backgroundColor: \"#636E72\",\n    color: \"#DFE6E9\",\n    margin: '15px 0 15px 0'\n  },\n  caseNumber: {\n    fontWeight: \"700\",\n  },\n});\n\nconst CaseView = ({number, label}) => {\n  const classes = useStyles();\n  return <div style={{\n    marginTop: '15px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }}>\n    <Typography\n      variant=\"h6\"\n      component=\"h6\"\n      className={classes.caseNumber}\n    >\n      {number}\n    </Typography>\n    <Typography>{label}</Typography>\n  </div>\n}\nconst CovidCard = ({\n  newConfirmed,\n  totalConfirmed,\n  totalDeaths,\n  countryID,\n  countryName,\n}) => {\n  const classes = useStyles();\n  return (\n    <Card variant=\"outlined\" className={classes.root}>\n      <CardActionArea>\n        <CardContent>\n          <div className=\"header-wrapper\">\n            <img\n            // Menggunakan sumber bendera dari luar\n              src={`https://www.countryflags.io/${countryID}/flat/32.png`}\n              style={{ marginRight: \"2vw\" }}\n              alt=\"\"\n            />\n            <Typography variant=\"h5\" component=\"h2\">\n              {countryName}\n            </Typography>\n          </div>\n          <div style={{\n            display: \"flex\",\n            justifyContent: \"space-around\"\n          }}>\n          <CaseView number={newConfirmed} label=\"Kasus Baru Covid19\" />\n          <CaseView number={totalConfirmed} label=\"Total Terkonfirmasi Terpapar Covid19 \" />\n          <CaseView number={totalDeaths} label=\"Total Kematian Covid19\" />\n          </div>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n\nexport default CovidCard;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <h1\n      style={{\n        color: \"white\" ,\n      }}\n    >\n      Covid Diseluruh Dunia\n    </h1>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport CovidCard from \"./components/CovidCard\";\nimport Header from \"./components/Header\";\nimport Button from \"@material-ui/core/Button\";\n\n// Disini kita menggunakan ThemeProvider dari material-ui agar komponen UI material-ui bisa mengakses value tema aplikasi\n// Implementasi provider ini menggunakan fitur context dari React!\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\n// const data = [\n//   {\n//     newConfirmed: 255,\n//     totalConfirmed: 255,\n//     totalDeaths: 255,\n//     countryID: \"CA\",\n//     countryName: \"Canada\",\n//   },\n// ];\n\n// Komponen untuk me-render CovidCard dari daftar negara\nconst NationLists = ({ lists }) => {\n  return lists.map((list, index) => (\n    <CovidCard\n      newConfirmed={list.newConfirmed}\n      totalConfirmed={list.totalConfirmed}\n      totalDeaths={list.totalDeaths}\n      countryID={list.countryID}\n      countryName={list.countryName}\n      key={index}\n    />\n  ));\n};\n\n// Nilai tema yang akan diakses oleh setiap komponen material-ui\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#757ce8\",\n      main: \"#3f50b5\",\n      dark: \"#002884\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#ff7961\",\n      main: \"#f44336\",\n      dark: \"#ba000d\",\n      contrastText: \"#000\",\n    },\n  },\n});\n\n//Aplikasi utama kita\nconst CovidApp = () => {\n  //Deklarasi state yang dibutuhkan\n  const [lists, setLists] = React.useState([]);\n  const [countries, setCountries] = React.useState([]);\n  const [currentShown, setCurrentShown] = React.useState(0);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  // Fungsi untuk menambah data sebuah negara ke dalam daftar (lists)\n  const addCountries = (currentShown, setLists, setCurrentShown, countries) => {\n    for (let i = currentShown; i < currentShown + 10; i++) {\n      // Jika seluruh negara sudah dimunculkan, kita bisa hentikan looping untuk menghindari error undefined.\n      if (i === countries.length) break;\n      const newItem = {\n        newConfirmed: countries[i].NewConfirmed,\n        totalConfirmed: countries[i].TotalConfirmed,\n        totalDeaths: countries[i].TotalDeaths,\n        countryID: countries[i].CountryCode,\n        countryName: countries[i].Country,\n      };\n      setLists((prevArray) => [...prevArray, newItem]);\n    }\n    setCurrentShown(currentShown + 10);\n  };\n\n  //Hook useEffect yang akan dijalankan ketika komponen sudah render\n  React.useEffect(() => {\n    setIsLoading(true);\n    fetch(\"https://api.covid19api.com/summary\")\n      .then((result) => result.json())\n      .then((result) => {\n        const countries = result.Countries;\n        setCountries(countries);\n        addCountries(currentShown, setLists, setCurrentShown, countries);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n  // Kita menyertakan dependency array kosong `[]` agar useEffect ini hanya dijalankan sekali saja.\n  // Kegunaan dependency array agar si useEffect hanya dijalankan jika value bersangkutan mengalami perubahan.\n  // Ekivalen dengan metode componentDidMount() pada class component\n\n  // Function handleMore ketika pengguna klik tombol `Handle More`\n  const handleMore = () =>\n    addCountries(currentShown, setLists, setCurrentShown, countries);\n\n  return (\n    <div className=\"app-wrapper\">\n      <Header />\n      {/* Conditional rendering agar memberitahu user bahwa data sedang diambil */}\n      {isLoading && <div style={{ color: \"red\" }}>Loading Harap Menunggu!</div>}\n      {!isLoading && (\n        <>\n          <NationLists lists={lists} />\n          <Button\n            variant=\"contained\"\n            color= \"primary\"\n            onClick={() => handleMore()}\n            style={{\n              marginBottom: \"20px\",\n            }}\n          >\n            Muat Lagi\n          </Button>\n        </>\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  // Kita sertakan Provider kita dengan value theme yang akan dipassing,\n  // agar komponen didalamnya bisa mengakses value tersebut.\n  return (\n    <ThemeProvider theme={theme}>\n      <CovidApp />\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}